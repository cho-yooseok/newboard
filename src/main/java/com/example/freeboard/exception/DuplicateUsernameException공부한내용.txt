package com.example.freeboard.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * 사용자 이름(Username)이 중복될 때 발생시키는 커스텀 예외 클래스
 *
 * - RuntimeException을 상속받아 실행 중에 발생할 수 있는 예외로 정의
 * - @ResponseStatus(HttpStatus.CONFLICT)를 통해
 *   예외 발생 시 클라이언트에게 HTTP 409(CONFLICT) 상태 코드를 반환하도록 설정
 *
 * 예: 회원가입 시 이미 존재하는 username으로 요청이 들어오면
 *     DuplicateUsernameException을 던져서
 *     "이미 존재하는 사용자명입니다." 같은 메시지를 전달할 수 있다.
 */
@ResponseStatus(HttpStatus.CONFLICT) // 예외 발생 시 HTTP 상태 코드 409 반환
public class DuplicateUsernameException extends RuntimeException {

    /**
     * 예외를 생성할 때 에러 메시지를 전달받아
     * RuntimeException의 생성자(super)에 넘겨준다.
     *
     * @param message 클라이언트나 로그에 보여줄 에러 메시지
     */
    public DuplicateUsernameException(String message) {
        super(message); // 부모 생성자 호출하여 메시지 저장
    }
}



RuntimeException 상속
실행 중(runtime)에 발생하는 예외로, 개발자가 따로 try-catch 하지 않아도 전파됩니다.
Spring의 예외 처리(@ControllerAdvice, @ExceptionHandler 등)나 @ResponseStatus 로 처리할 수 있습니다.


@ResponseStatus(HttpStatus.CONFLICT)
이 예외가 발생하면 Spring은 자동으로 HTTP 응답 상태 코드 409(CONFLICT) 를 반환합니다.
즉, 클라이언트는 단순히 "서버 에러(500)"가 아니라 “중복된 리소스로 인해 충돌이 발생했다” 는 걸 알 수 있습니다.


생성자
new DuplicateUsernameException("이미 존재하는 사용자명입니다.") 처럼 호출하면,
메시지가 부모 클래스(RuntimeException)에 저장되고, 이후 예외 메시지로 활용됩니다.