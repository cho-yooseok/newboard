package com.example.freeboard.dto;

import com.example.freeboard.entity.User;
import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.time.LocalDateTime;

/**
UserDto (Data Transfer Object)
사용자 정보를 클라이언트로 전달할 때 사용하는 DTO 클래스입니다
Entity(User) 전체를 직접 노출하지 않고 필요한 정보만 담아 반환합니다.
**/
@Getter // Lombok: getter 자동생성
@Setter // Lombok: setter 자동생성
@NoArgsConstructor // Lombok: 기본 생성자 자동 생성
@AllArgsConstructor // Lombok: 모든 필드를 파라미터로 받는 생성자 자동 생성
public class UserDto {

    /** 사용자 고유 ID (Primary Key) **/
    private Long id;

    /** 사용자 이름 **/
    private String username;

    /** 사용자 권한(Role) -> Enum 타입(UserRole 등)을 String으로 변환해서 저장 **/
    private String role;

    /** 계정 생성 시각 **/
    private LocalDateTime createdAt;

    /**
    Entity -> DTO 변환 메서드
    User 엔티티 객체를 UserDto 객체로 변환합니다.
    Controller 나 Service 에서 Entity를 직접 반환하지 않고 DTO로 변환해 응답할 때 사용합니다.
    **/
    public static UserDto fromEntity(User user) {
        UserDto dto = new UserDto();
        dto.setId(user.getId());                // User 엔티티의 ID 값 복사
        dto.setUsername(user.getUsername());    // Enum(Role)을 String으로 변환해 저장
        dto.setCreatedAt(user.getCreatedAt());  // User 엔티티의 생성일시 복사
        return dto;
    }
}


추가 해설
1. DTO의 역할
UserDto 는 Entity(User)의 모든 데이터를 직접 노출하지 않고, 필요한 정보만 담아 외부로 전달하는 안전한 객체입니다
예를 들어, User엔티티에 비밀번호가 들어 있어도 UserDto에는 포함하지 않으므로 보안상 안전합니다.

2. Lombok 어노테이션
@Getter, @Setter -> getter/setter 자동 생성
@NoArgsConstructor -> 파라미터 없는 생성자 생성
@AllArgsConstructor -> 모든 필드를 받는 생성자 생성

3. fromEntity(User user)
정적 메서드로, User 엔티티를 UserDto로 변환하는 팩토리 메서드
role 은 Enum 타입일 수 있으므로  .name()을 호출해 문장려로 변환 후 저장
보통 Service 또는 Controller 에서 return UserDto.fomEntity(user); 식으로 사용


정리
UserDto 는 User엔티티를 안전하게 외부에 노출하기 위한 변환용 객체이고,
fromEntity는 Entity -> DTO 변환을 간편하게 해주는 메서드




public static UserDto fromEntity(User user) {
}

static
정적 메서드 라는 뜻
UserDto 객체를 따로 만들지 않아도 클래스 이름으로 직접 호출할 수 있습니다

UserDto dto = UserDto.fromEntity(user);

처럼 new UserDto() 없이 곧바로 사용 가능

정적 메서드 안에서는 인스턴스 변수나 메서드는 못 쓰고, 전달받은 값(user)만 활용



UserDto
리턴 타입
이 메서드를 실행하면 UserDto 객체가 반환된다는 뜻입니다

즉, User 엔티티를 받아 UserDto 로 변환해 돌려줍니다



fromEntity
메서드 이름
엔티티에서 (DTO를) 만든다    라는 의미로 지은 이름
보통 fromEntity는 Entity -> DTO 변환을 담당하는 메서드 이름으로 자주 씁니다



(User user)
매개변수 (Parameter)
User 타입의 객체를 하나 받아온다는 뜻입니다

즉, fromEntity 를 호출할 때 반드시 User 객체를 넘겨야 합니다


정리
public static UserDto fromEntity(User user)
->
User 객체를 받아서 UserDto 객체를 만들어 반환하는, 어디서든 호출 가능한 정적 메서드



UserDto dto = new UserDto()
UserDto 타입의 변수 dto를 선언하고, UserDto의 새 인스턴스(객체)를 생성해 dto에 그 참조를 저장한다

풀어서 설명하면


1. UserDto dto
UserDto 라는 타입을 가진 변수 dto를 선언하는 부분입니다
아직 값은 없을 수도 있지만(선언부만 있을경우)

2. new UserDto()
new 연산자는 새 객체를 생성한다





dto.setRole(user.getRole().name());

1. user.getRole()
user 객체에서 role 값을 가져옵니다
보통 role 은  Enum 타입 (UserRole 같은) 으로 선언 되어 있습니다

public enum UserRole {
    USER, ADMIN
}

따라서 user.getRole() 은 UserRole.USER  또는   UserRole.ADMIN 같은  Enum 상수를 반환합니다



2 .name()
Enum이 가진 내장 메서드입니다
Enum 상수를 문자열(String)로 변환해 줍니다

예:
UserRole.USER.name() -> "USER"
UserRole.ADMIN.name() -> "ADMIN"

즉, Enum타입 -> 문자열(String) 변환이 일어나는 부분입니다.


3. dto.setRole(...)
UserDto의 role 필드(자료형이 String)에 값을 집어넣습니다
UserDto는 DTO 라서 외부로 전달되기 때문에,
보통 프론트엔드에는 Enum 대신 "USER",  "ADMIN"  같은 문자열로 내려줍니다


전체흐름
1. user 엔티티에서 Enum타입의 role 값을 가져옴
2. .name() 을 호출해서 "USER" 또는 "ADMIN" 같은 문자열로 변환
3. DTO의 role 필드에 저장
