package com.example.freeboard.controller;

import com.example.freeboard.dto.RegisterRequest; // 회원가입 요청 시 필요한 데이터를 담는 DTO
import com.example.freeboard.dto.AuthRequest; // 로그인 요청 시 필요한 데이터를 담는 DTO
import com.example.freeboard.dto.JwtAuthenticationResponse; // JWT 인증 성공 시 반환할 데이터를 담는 DTO
import com.example.freeboard.dto.UserDto; // 사용자 정보를 담는 DTO


/*
사용자 인증 관련 API를 처리하는 rest 컨트롤러
회원가입 로그인 현재 로그인된 사용자 정보 조회 기능을 제공합니다.
*/
@RestController



public AuthController(UserService userService, AuthenticationManager authenticationManager, JwtTokenProvier tokenProvider) {
}

AuthController 클래스의 생성자(Constructor)  입니다

public AuthController(UserService userService, AuthenticationManager authenticationManager, JwtTokenProvier tokenProvider) {
    this.userService = userService;
    this.authenticationManager = authenticationManager;
    this.tokenProvider = tokenProvider;
}

해석하면
public AuthController(...)
AuthController 객체가 생성될 때 실행되는 생성자.
Spring이 의존성 주입(Dependency Injection, DI)을 통해 필요한 객체들을 자동으로 넣어줌.

UserService userService
사용자 관련 로직(회원가입, 사용자 조회 등)을 담당하는 서비스 클래스

AuthenticationManager authenticationManager
스프링 시큐리티에서 로그인 요청이 들어왔을 때 아이디/비밀번호 검증을 처리하는 객체

JwtTokenProvider tokenProvider
로그인 성공 시 JWT(Json Web Token)를 생성하고 검증하는 역할을 하는 클래스

this.userService = userService;
생성자 파라미터로 받은 userService 를 현재 AuthController 클래스의 필드에 저장

즉, 이 생성자는
AuthController 가 실행될 때, 회원 서비스(UserService), 인증 관리자(AuthenticationManager),
JWT제공자(JwtTokenProvider) 객체를 주입받아 내부에서 사용할 수 있게 설정한다


@Valid
RegisterRequest 객체에 있는 검증 애노테이션(@NotNull, @Size 등)을 검사하여 유효하지 않으면
자동으로 예외 발생

@RequestBody
클라이언트가 HTTP 요청 본문(body)에 담아 보낸 JSON 데이터를 RegisterRequest 객체로 변환해 매핑


RegisterRequest registerRequest
회원가입 요청 데이터를 담는 DTO(Data Transfer Object)
일반적으로 username, password, email 같은 필드가 들어있음


정리
클라이언트가 /api/auth/register 엔드포인트로 회원가입 요청 (JSON 형태)을 보내면,
그 요청을 RegisterRequest 객체로 변환하고, 유효성 검증을 거쳐 처리한 후,
성공 또는 실패 메시지를  ResponseEntity<String> 형태로 반환한다.


userService.registerUser(registerRequest);

userService
회원 관련 기능 (회원가입, 사용자 조회 등)을 담당하는 서비스 클래스 객체

registerUser(...)
UserService 안에 정의된 회원가입 메서드
새로운 사용자를 데이터베이스에 저장하거나, 중복 여부를 확인하는 등의 로직을 수행

registerRequest
클라이언트가 회원가입할 때 보낸 요청 데이터(username, password, email 등이 담긴 DTO)


즉,
회원가입 요청으로 들어온 사용자 정보를 서비스(UserService)에 전달해서 실제 회원가입을 처리한다



ResponseEntity
Spring에서 http 응답(상태코드 + 헤더 + 바디)을 직접 구성할 수 있는 객체

.status(HttpStatus.CREATED)
HTTP 상태 코드를 201 Created 로 설정한다는 의미

보통 리소스가 새로 생성되었을때 (회원가입, 게시글 생성 등) 사용됨

.body("회원가입이 성공적으로 완료되었습니다.!")
응답 본문(body)에 메시지 문자열을 담아서 클라이언트에게 보냄


즉
회원가입이 정상적으로 처리되었으니, 상태 코드 201과 함께 성공 메시지를 응답한다


return ResponseEntity.status(HttpStatus.CREATED).body("회원가입이 성공적으로 완료되었습니다!");


catch
try 블록 안에서 예외(Exception)가 발생했을 때 실행되는 블록

IllegalArgumentException
메서드에 전달된 인자가 잘못되었을 때 발생하는 표준 자바 예외 클래스
예: 사용자 이름이 중복되엇거나, 비밀번호가 유효성 검증을 통과하지 못한 경우

e
발생한 예외 객체를 참조하는 변수

e.getMessage() 등을 통해 예외 메시지를 가져올 수 있음

즉, 이 구문은
만약 회원가입 과정에서 잘못된 인자가 들어와
IllegalArgumentException 예외가 발생하면, 이 블록을 실행한다.

라는 의미이다



return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());

해석
ResponseEntity
HTTP응답을 직접 제어할 수 있는 객체

.status(HttpStatus.BAD_REQUEST)
HTTP 상태 코드를 400 Bad Request 로 설정

클라이언트가 잘못된 요청을 했을 때 사용됨. (예: 회원가입 시 잘못된 값 전달, 중복된 아이디 등)

.body(e.getMessage())
발생한 예외 객체 e 에서 에러 메시지(getMesssage())를 꺼내서 응답 본문(Body)에 담음
예: "이미 존재하는 사용자 이름입니다." 같은 메시지가 클라이언트에게 전달됨

즉
"잘못된 입력값 때문에 예외가 발생했으니, 상태코드 400과 함께 예외 메시지를 클라이언트에게 전달한다"


catch (Exception e) {
}

catch
try 블록 안에서 예외가 발생했을 때 실행되는 코드 블록

try  블록 안에서 예외가 발생했을 때 실행되는 코드블록

Exception
자바의 모든 예외 클래스의 최상위 부모 클래스
따라서 Exception e 로 받으면 모든 종류의 예외를 처리할 수 있음
RuntimeException, IOException, NullPointerException 등 구체적인 예외들도 다 여기서 잡힙

즉,
앞에서 처리하지 못한 모든 예외(exception)를 잡아서 처리하겠다.


10:30
public ResponseEntity<JwtAuthenticationResponse>
메서드의 반환타입을 의미

ResponseEntity 는 Http 응답(상태코드 + 헤더 + 본문)을 담는 객체이다
제네릭 타입<JwtAuthenticationResopnse>은 응답본문(body)에
JwtAuthenticationResponse 객체를 담는다는 뜻입니다.
즉, 이 메서드는 JWT 인증 결과(토큰 등)를 응답으로 돌려줍니다.

authenticateUser
메서드 이름
사용자 인증을 수행한다는 의미입니다.
보통 로그인 시 아이디/ 비밀번호를 받아 JWT 토큰을 발급하는 역할

@Valid
authRequest 객체에 검증(Validation)을 적용합니다.
예: 아이디/ 비밀번호가 비어있지 않은지, 형식이 맞는지 등을 자동 검사합니다.
검증 실패 시 컨트롤러 메서드까지 오지 않고 예외가 발생합니다.

@RequestBody AuthRequest authRequest
클라이언트가 요청할 때 보낸 JSON 데이터를 자바 객체(AuthRequest)로 변환해 줍니다.

예:
json
{
"username": "user1",
"password": "1234"
}

이런 JSON 이 들어오면 AuthRequest 객체로 바뀌어 authRequest 변수에 담깁니다.

종합해석
이 메서드는 클라이언트가 보낸 로그인 요청(AuthRequest)을 검증한 뒤, 인증이 성공하면
JwtAuthenticationResponse 를 담은 HTTP 응답(ResponseEntity)으로 반환하는 로그인 API 메서드입니다.


Authentication authentication = authenticationManager.authenticate()

Authentication authentication
Spring Security 에서 제공하는 인증 정보 객체를 담는 변수입니다.
로그인 성공 시, 사용자 이름 (username), 권한(authorities), 인증 여부 등을 담게 됩니다.

authenticationManager
Spring Security의 인증을 처리하는 핵심 객체입니다
아이디와 비밀번호를 검사해서 올바른 사용자인지 확인해줍니다.

.authenticate(...)
인증을 수행하는 메서드입니ㅏㄷ.
전달받은 로그인 정보(아이디/ 비밀번호 등)를 확인한 뒤,
인증 성공 시 -> Authentication 객체를 반환
인증 실패 시 -> 예외(BadCredentialsException 등) 발생

authenticationManager.authenticate(...) 는 사용자가 입력한 로그인 정보를 검증해서, 올바른 사용자라면
인증된 Authentication 객체를 반환하는 과정입니다

즉,
"로그인 시도"
인증 매니저가 아이디/ 비밀번호 확인
결과를 authentication 에 담는다

new UsernamePasswordAuthenticationToken()

해석해줘

new UsernamePasswordAuthenticationToken()
UserPasswordAuthenticationToken
Spring Security에서 제공하는 사용자 이름(username) 과 비밀번호(password)를 담는 인증용 객체입니다.

사용자가 로그인할 때 입력한 정보를 이 객체에 담아서 authenticationManager.authenticate() 로 전달합니다.


new UsernamePasswordAuthenticationToken()

UsernamePasswordAuthenticationToken
Spring Security 에서 제공하는 사용자 이름(username)과 비밀번호(password)를 담는 인증용 객체입니다.

사용자가 로그인할 때 입력한 정보를 이 객체에 담아서 authenticationManager.authenticate()로 전달합니다.

생성자 인자
보통 이렇게 사용합니다.

new UsernamePasswordAuthenticationToken(username, password)
username 사용자가 입력한 아이디
password 사용자가 입력한 비밀번호

인증 매니저는 이 토큰 안의 정보를 꺼내 DB에 저장된 값과 비교해 인증을 수행합니다.

반환 결과
처음 생성할 때는 단순히 "아이디/ 비밀번호 만 담긴 토큰"입니다
인증 성공 후에는 Principal(사용자 정보), Authorities(권한 정보) 까지 포함된 완전한 인증 객체로 바뀝니다

new UsernamePasswordAuthenticationToken(...)
사용자가 입력한 아이디와 비밀번호를 담아 인증 매니저에게 전달하기 위한 로그인 요청 토큰입니다.



new UsernamePasswordAuthenticationToken()
authRequest.getUsername(),
authRequest.getPassword()

UsernamePasswordAuthenticationToken 객체를 새로 생성하는 코드입니다.
UsernamePasswordAuthenticationToken
Spring Security 에서 사용자의 인증정보(아이디/비밀번호)를 담는 토큰 클래스입니다.

이 토큰은 AuthenticationManager 로 전달되어 실제 인증 절차(로그인 검증)에 사용됩니다.

authRequest.getPassword()
사용자가 로그인 시 입력한 비밀번호(Password) 값을 꺼내옵니다.

즉, 사용자가 보낸 로그인 요청(authRequest)에서 아이디와 비밀번호를 꺼내어,
Spring Security에서 사용할 인증토큰(UsernamePasswordAuthenticationToken)을 만드는 코드입니다.

정리
사용자가 입력한 아이디와 비밀번호를 기반으로 Spring Security 인증 토큰을 만든다



UserDetails userDetails = (UserDetails)authentication.getPrincipal();

authenticaion
현재 로그인한 사용자의 인증 정보를 담고 있는 객체(Authentication 타입)

getPrincial()
authentication 객체에서 사용자의 주체(Principal) 정보를 가져옴.
여기에는 보통 사용자의 아이디나 계정 정보가 들어있음

(UserDetails)
getPrincipal() 메서드가 반환하는 객체를 UserDetails 타입으로 캐스팅
